Index: linux-4.14.193/drivers/mtd/mtdsplit/mtdsplit_squashfs.c
===================================================================
--- linux-4.14.193.orig/drivers/mtd/mtdsplit/mtdsplit_squashfs.c
+++ linux-4.14.193/drivers/mtd/mtdsplit/mtdsplit_squashfs.c
@@ -36,7 +36,7 @@ mtdsplit_parse_squashfs(struct mtd_info
	if (err)
		return err;

-	parent_mtd = mtd_get_master(master);
+	parent_mtd = mtdpart_get_master(master);
	part_offset = mtdpart_get_offset(master);

	part = kzalloc(sizeof(*part), GFP_KERNEL);
Index: linux-4.14.193/drivers/net/phy/swconfig.c
===================================================================
--- linux-4.14.193.orig/drivers/net/phy/swconfig.c
+++ linux-4.14.193/drivers/net/phy/swconfig.c
@@ -591,8 +591,13 @@ swconfig_parse_ports(struct sk_buff *msg

		port = &val->value.ports[val->len];

+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		if (nla_parse_nested_deprecated(tb, SWITCH_PORT_ATTR_MAX, nla,
				port_policy, NULL))
+#else
+		if (nla_parse_nested(tb, SWITCH_PORT_ATTR_MAX, nla,
+				port_policy, NULL))
+#endif
			return -EINVAL;

		if (!tb[SWITCH_PORT_ID])
@@ -613,7 +618,11 @@ swconfig_parse_link(struct sk_buff *msg,
 {
	struct nlattr *tb[SWITCH_LINK_ATTR_MAX + 1];

+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
	if (nla_parse_nested_deprecated(tb, SWITCH_LINK_ATTR_MAX, nla, link_policy, NULL))
+#else
+	if (nla_parse_nested(tb, SWITCH_LINK_ATTR_MAX, nla, link_policy, NULL))
+#endif
		return -EINVAL;

	link->duplex = !!tb[SWITCH_LINK_FLAG_DUPLEX];
@@ -991,56 +1000,106 @@ swconfig_done(struct netlink_callback *c
 static struct genl_ops swconfig_ops[] = {
	{
		.cmd = SWITCH_CMD_LIST_GLOBAL,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.doit = swconfig_list_attrs,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_LIST_VLAN,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.doit = swconfig_list_attrs,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_LIST_PORT,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.doit = swconfig_list_attrs,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_GET_GLOBAL,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.doit = swconfig_get_attr,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_GET_VLAN,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.doit = swconfig_get_attr,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_GET_PORT,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.doit = swconfig_get_attr,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_SET_GLOBAL,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.flags = GENL_ADMIN_PERM,
		.doit = swconfig_set_attr,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_SET_VLAN,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.flags = GENL_ADMIN_PERM,
		.doit = swconfig_set_attr,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_SET_PORT,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.flags = GENL_ADMIN_PERM,
		.doit = swconfig_set_attr,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
	},
	{
		.cmd = SWITCH_CMD_GET_SWITCH,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,2,0)
		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
+#endif
		.dumpit = swconfig_dump_switches,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy = switch_policy,
+#endif
		.done = swconfig_done,
	}
 };
@@ -1050,7 +1109,9 @@ static struct genl_family switch_fam = {
	.hdrsize = 0,
	.version = 1,
	.maxattr = SWITCH_ATTR_MAX,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 2, 0)
	.policy = switch_policy,
+#endif
	.module = THIS_MODULE,
	.ops = swconfig_ops,
	.n_ops = ARRAY_SIZE(swconfig_ops),
Index: linux-4.14.193/drivers/net/phy/swconfig_leds.c
===================================================================
--- linux-4.14.193.orig/drivers/net/phy/swconfig_leds.c
+++ linux-4.14.193/drivers/net/phy/swconfig_leds.c
@@ -321,6 +321,14 @@ err_free:
	return err;
 }

+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,19,0)
+static void
+swconfig_trig_activate_void(struct led_classdev *led_cdev)
+{
+	swconfig_trig_activate(led_cdev);
+}
+#endif
+
 static void
 swconfig_trig_deactivate(struct led_classdev *led_cdev)
 {
@@ -515,7 +523,11 @@ swconfig_create_led_trigger(struct switc

	sw_trig->swdev = swdev;
	sw_trig->trig.name = swdev->devname;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,19,0)
+	sw_trig->trig.activate = swconfig_trig_activate_void;
+#else
	sw_trig->trig.activate = swconfig_trig_activate;
+#endif
	sw_trig->trig.deactivate = swconfig_trig_deactivate;

	INIT_DELAYED_WORK(&sw_trig->sw_led_work, swconfig_led_work_func);
